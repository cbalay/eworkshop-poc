package com.productys.poc.composite.divers;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.VerticalLayout;

public class TestProgressIndicatorComposite extends CustomComponent {

	@AutoGenerated
	private VerticalLayout mainLayout;

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TestProgressIndicatorComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private void buildMainLayout() {
		// the main layout and components will be created here
		mainLayout = new VerticalLayout();
		
		// Create an indicator that makes you look busy
		final ProgressIndicator indicator = new ProgressIndicator(new Float(0.0));
		mainLayout.addComponent(indicator);

		// Set polling frequency to 0.5 seconds.
		indicator.setPollingInterval(500);
		indicator.setStyleName("big");

		// Add a button to start working
		final Button button = new Button("Click to start");
		mainLayout.addComponent(button);

		// Another thread to do some work
		class WorkThread extends Thread {
		    public void run () {
		        double current = 0.0;
		        while (true) {
		            // Do some "heavy work"
		            try {
		                sleep(50); // Sleep for 50 milliseconds
		            } catch (InterruptedException e) {}
		            
		            // Show that you have made some progress:
		            // grow the progress value until it reaches 1.0.
		            current += 0.01;
		            if (current>1.0)
		                indicator.setValue(new Float(1.0));
		            else 
		                indicator.setValue(new Float(current));
		            
		            // After all the "work" has been done for a while,
		            // take a break.
		            if (current > 1.2) {
		                // Restore the state to initial.
		                indicator.setValue(new Float(0.0));
		                button.setVisible(true);
		                break;
		            }
		        }
		    }
		}

		// Clicking the button creates and runs a work thread
		button.addListener(new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		        final WorkThread thread = new WorkThread();
		        thread.start();
		        
		        // The button hides until the work is done.
		        button.setVisible(false);
		    }
		});
	}

}
