package com.productys.poc.composite.divers;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.GridLayout;
import com.vaadin.ui.Panel;

public class TestCarousselComposite extends CustomComponent {

	@AutoGenerated
  private AbsoluteLayout mainLayout;
	@AutoGenerated
  private GridLayout gridLayout_1;
	@AutoGenerated
  private Button button_9;
	@AutoGenerated
  private Button button_8;
	@AutoGenerated
  private Button button_7;
	@AutoGenerated
  private Button button_6;
	@AutoGenerated
  private Button button_5;
	@AutoGenerated
  private Button button_4;
	@AutoGenerated
  private Button button_3;
	@AutoGenerated
  private Button button_2;
	@AutoGenerated
  private Button button_1;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TestCarousselComposite() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
  private AbsoluteLayout buildMainLayout() {
	  // common part: create layout
	  mainLayout = new AbsoluteLayout();
	  mainLayout.setImmediate(false);
	  mainLayout.setSizeFull();
	  mainLayout.setMargin(false);
	  
	  final int PAS = 30;
	  
	  // top-level component properties
	  /*setWidth("100.0%");
	  setHeight("100.0%");*/

	  
	  // gridLayout_1
	  gridLayout_1 = buildGridLayout_1();
	  
	  final Panel panel	 = new Panel(); // Using panel to have a horizontal scroll bar for inside table.
	  panel.setWidth("200px");
	  panel.setHeight("400px");
	  panel.setContent(gridLayout_1);
	  panel.setScrollable(true);

	  
	  Button scrollUp = new Button("Scroll Up");
		scrollUp.addListener(new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		        int scrollPos = panel.getScrollTop() - PAS;
		        if(scrollPos < 0) {
		        	scrollPos = 0;
		        }
		        System.out.println("scrollPos: " + scrollPos);
		        panel.setScrollTop(scrollPos);
		    }
		});
		mainLayout.addComponent(scrollUp, "top: 200px; left: 400px;");
		        
		Button scrollDown = new Button("Scroll Down");
		scrollDown.addListener(new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		        int scrollPos = panel.getScrollTop() + PAS;
		        int panelHeight = (int)panel.getHeight();
		        int maxScrollTop = ((int) panel.getContent().getHeight() - panelHeight) + 10;
		        if(scrollPos > maxScrollTop) {
		        	scrollPos = maxScrollTop;
		        }
	    	  	System.out.println("panelHeight:" + panelHeight + ", panelContentHeight:" + panel.getContent().getHeight() + ", scrollPos:" + scrollPos + ", maxScrollTop:" + maxScrollTop);
		        panel.setScrollTop(scrollPos);
		    }
		});
		mainLayout.addComponent(scrollDown, "top: 200px; left: 300px;");
	  
	  Button scrollLeft = new Button("Scroll Left");
	  scrollLeft.addListener(new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		        int scrollPos = panel.getScrollLeft() - PAS;
		        if(scrollPos < 0) {
		        	scrollPos = 0;
		        }
		        System.out.println("scrollPos: " + scrollPos);
		        panel.setScrollLeft(scrollPos);
		    }
		});
		mainLayout.addComponent(scrollLeft, "top: 250px; left: 400px;");
		        
		Button scrollRight = new Button("Scroll right");
		scrollRight.addListener(new Button.ClickListener() {
		    public void buttonClick(ClickEvent event) {
		        int scrollPos = panel.getScrollLeft() + PAS;
		        int panelwidth = (int)panel.getWidth();
		        int maxScrollLeft = ((int) panel.getContent().getWidth() - panelwidth) + 10;
		        if(scrollPos > maxScrollLeft) {
		        	scrollPos = maxScrollLeft;
		        }
	    	  	System.out.println("scrollPos:" + scrollPos + ", maxScrollLeft:" + maxScrollLeft);
		        panel.setScrollLeft(scrollPos);
		    }
		});
		mainLayout.addComponent(scrollRight, "top: 250px; left: 300px;");
		
		mainLayout.addComponent(panel);
	  
	  return mainLayout;
  }

	@AutoGenerated
  private GridLayout buildGridLayout_1() {
	  // common part: create layout
	  gridLayout_1 = new GridLayout();
	  gridLayout_1.setImmediate(false);
	  gridLayout_1.setWidth("300px");
	  gridLayout_1.setHeight("600px");
	  gridLayout_1.setMargin(false);
	  gridLayout_1.setColumns(3);
	  gridLayout_1.setRows(3);
	  
	  // button_1
	  button_1 = new Button();
	  button_1.setCaption("Button topLeft");
	  button_1.setImmediate(false);
	  button_1.setWidth("-1px");
	  button_1.setHeight("-1px");
	  gridLayout_1.addComponent(button_1, 0, 0);
	  
	  // button_2
	  button_2 = new Button();
	  button_2.setCaption("Button topMiddle");
	  button_2.setImmediate(false);
	  button_2.setWidth("-1px");
	  button_2.setHeight("-1px");
	  gridLayout_1.addComponent(button_2, 1, 0);
	  
	  // button_3
	  button_3 = new Button();
	  button_3.setCaption("Button topRight");
	  button_3.setImmediate(false);
	  button_3.setWidth("-1px");
	  button_3.setHeight("-1px");
	  gridLayout_1.addComponent(button_3, 2, 0);
	  
	  // button_4
	  button_4 = new Button();
	  button_4.setCaption("Button middleLeft");
	  button_4.setImmediate(false);
	  button_4.setWidth("-1px");
	  button_4.setHeight("-1px");
	  gridLayout_1.addComponent(button_4, 0, 1);
	  
	  // button_5
	  button_5 = new Button();
	  button_5.setCaption("Button middleMiddle");
	  button_5.setImmediate(false);
	  button_5.setWidth("-1px");
	  button_5.setHeight("-1px");
	  gridLayout_1.addComponent(button_5, 1, 1);
	  
	  // button_6
	  button_6 = new Button();
	  button_6.setCaption("Button middleRight");
	  button_6.setImmediate(false);
	  button_6.setWidth("-1px");
	  button_6.setHeight("-1px");
	  gridLayout_1.addComponent(button_6, 2, 1);
	  
	  // button_7
	  button_7 = new Button();
	  button_7.setCaption("Button bottomLeft");
	  button_7.setImmediate(false);
	  button_7.setWidth("-1px");
	  button_7.setHeight("-1px");
	  gridLayout_1.addComponent(button_7, 0, 2);
	  
	  // button_8
	  button_8 = new Button();
	  button_8.setCaption("Button bottomMiddle");
	  button_8.setImmediate(false);
	  button_8.setWidth("-1px");
	  button_8.setHeight("-1px");
	  gridLayout_1.addComponent(button_8, 1, 2);
	  
	  // button_9
	  button_9 = new Button();
	  button_9.setCaption("Button bottomRight");
	  button_9.setImmediate(false);
	  button_9.setWidth("-1px");
	  button_9.setHeight("-1px");
	  gridLayout_1.addComponent(button_9, 2, 2);
	  
	  return gridLayout_1;
  }


}
